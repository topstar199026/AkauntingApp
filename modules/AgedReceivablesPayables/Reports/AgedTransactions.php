<?php

namespace Modules\AgedReceivablesPayables\Reports;

use App\Abstracts\Report;
use App\Models\Document\Document;
use App\View\Components\Table\Th;
use Date;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Support\Arr;

abstract class AgedTransactions extends Report
{
    public $category = 'general.accounting';

    public $icon = 'fa fa-cart-arrow-down';

    public $periods;

    public $asAt;

    /**
     * @var \Illuminate\Support\Collection
     */
    public $rows;

    public $includeUpcoming = false;


    public function load()
    {
        $this->periods = config('aged-receivables-payables.periods');
        $this->includeUpcoming = $this->getSetting('include_upcoming', 'no') == 'yes';

        parent::load(); // TODO: Change the autogenerated stub
    }

    public function setData()
    {
        $this->rows = collect();
        $this->asAt = $this->getSetting('as_of') ? Date::parse($this->getSetting('as_of')) : Date::now();

        $keyBy = 'contact_id';

        $documents = $this->getDocumentsQuery()
            ->when(request('search'), function (Builder $builder) use ($keyBy) {
                $this->filterByName($builder, $keyBy, trim(request('search'),'"'));
            })
            ->accrued()
            ->notPaid()
            ->when(!$this->includeUpcoming, function ($q) {
                $q->where('due_at', '<=', $this->asAt);
            })
            ->get();

        $documents->each(function ($document) use ($keyBy) {
            $payments = 0;

            if ($document->status == 'partial') {
                foreach ($document->transactions as $transaction) {
                    $payments += $transaction->getAmountConvertedToDefault();
                }
            }

            $remainingAmount = $document->getAmountConvertedToDefault() - $payments;

            $diff = $document->due_at->diffInDays($this->asAt, false);
            $this->periods = config('aged-receivables-payables.periods');

            $key = $this->getKeyName($document, $keyBy);
            $row = $this->rows->get($key['key'], function () use ($key) {
                $row['key'] = $key['label'];
                $row['total'] = 0;

                foreach ($this->periods as $period) {
                    $row[$period['slug']] = 0;
                }
                if ($this->includeUpcoming) {
                    $row['upcoming'] = 0;
                }

                return $row;
            });

            foreach ($this->periods as $period) {
                if ((is_null($period['min']) || $diff >= $period['min']) && (is_null($period['max']) || $diff <= $period['max'])) {
                    $row[$period['slug']] += $remainingAmount;
                    $row['total'] += $remainingAmount;
                }
            }

            if ($diff < 0 && $this->includeUpcoming) {
                $row['upcoming'] += $remainingAmount;
                $row['total'] += $remainingAmount;
            }

            $this->rows->put($key['key'], $row);
        });

        $this->rows = $this->rows
            ->sortBy(function ($row) {
                return $row['key'];
            });
        $this->footer_totals = $this->rows->reduce(function ($totals, $row) {
            if (empty($totals)) {
                unset($row['key']);
                return $row;
            }
            foreach ($row as $col => $val) {
                if ($col !== 'key') {
                    $totals[$col] += $val;
                }
            }
            return $totals;
        });
    }

    public function getFields()
    {
        return [
            [
                'type' => 'selectGroup',
                'name' => 'include_upcoming',
                'title' => trans('aged-receivables-payables::general.include-upcoming'),
                'icon' => 'angle-double-right',
                'values' => [
                    'no' => trans('general.no'),
                    'yes' => trans('general.yes'),
                ],
                'selected' => 'no',
                'attributes' => [
                    'required' => 'required',
                ],
            ],
            [
                'type' => 'dateGroup',
                'name' => 'as_of',
                'title' => trans('aged-receivables-payables::general.as-of-form'),
                'icon' => 'calendar',
                'attributes' => [],
            ],
        ];
    }

    public function setViews()
    {
        parent::setViews(); // TODO: Change the autogenerated stub
        $this->views['detail'] = 'aged-receivables-payables::reports.detail';
    }

    protected function getKeyName($doc, $keyBy)
    {
        if ($keyBy == 'contact_id') {
            return ['label' => $doc->contact->name, 'key' => $doc->contact_id];
        }
    }

    protected function filterByName(Builder $builder, $keyBy, $term)
    {
        if ($keyBy == 'contact_id') {
             $builder->whereHas('contact', function (Builder $builder) use ($term) {
                $builder->where('name', 'like', '%' . $term . '%');
            });
        }
    }
}
